// Main do projeto.
// TODO: Atualizar estes comet√°rios.
#include <stdio.h>
#include <iostream>
#include <fstream>

#include "../lib/colors.h"

#include "pre_processor.cpp"

void showHelp(int args){
    printf("./tradutor <assembly file>\n");
    if(args == 1)
        printf(RED "Looks like you forgot the input file!\n\n" RESET);
    else
        printf(RED "You entered too many files!\n\n" RESET);

    printf("tradutor was created by Giovanni M Guidini and Thiago Veras Machado.\n");
    printf("This program will assemble files written in the imaginary assembly language.\n");
}

int main(int argc, char **argv){
    // Verify that number of arguments is correct.
    if(argc !=  2){
        // If no input files were given, or too many files.
        showHelp(argc);
        return 0;
    } 
    
    printf("Running Preprocessor....");
    // Tries to create the Pre_Processor
    Pre_processor pre_proc;
    try{
        pre_proc = Pre_processor(argv[1]);    // Creation may fail because of file
    } catch(std::string err) {
        printf(YELLOW "ABORTED\n" RESET);
        std::cout << "Aconteceu um erro fatal: " << err << std::endl;
        return 1;
    }
    // Runs pre_processor
    std::vector<Token> processed_file = pre_proc.run();
    std::vector<Error> pre_proc_errors = pre_proc.get_errors();
    // Verifies if it goes forward or no
    if(pre_proc_errors.size() == 0){
        printf(GREEN "OK\n" RESET);
        // generates output
        std::string pre_proc_output = pre_proc.generate_output();
        std::cout << "Arquivo pre processado gerado: " << pre_proc_output << std::endl;
    } else {
        printf(RED "FAILED\n" RESET);
        for(Error err : pre_proc_errors){
            std::cout << err << std::endl;
        }
        return 2;
    }
    // Collects info generated by pre_proc needed
    std::unordered_map<std::string, Symbol> symbol_table = pre_proc.get_symbol_table();

}